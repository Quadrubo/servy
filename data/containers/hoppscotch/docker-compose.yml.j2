services:
  # The service that spins up all 3 services at once in one container
  # This service runs the backend app in the port 3170
  hoppscotch-backend:
    container_name: hoppscotch-backend
    image: hoppscotch/hoppscotch-backend
    env_file:
      - ./.env
    restart: always
    environment:
      # Edit the below line to match your PostgresDB URL if you have an outside DB (make sure to update the .env file as well)
      - DATABASE_URL=postgresql://postgres:{{ hoppscotch_postgres_password }}@hoppscotch-db:5432/hoppscotch?connect_timeout=300
      - PORT=8080
    volumes:
      # Uncomment the line below when modifying code. Only applicable when using the "dev" target.
      # - ./packages/hoppscotch-backend/:/usr/src/app
      - /usr/src/app/node_modules/
    depends_on:
      hoppscotch-db:
        condition: service_healthy
    ports:
      - "3180:80"
      - "3170:3170"
    networks:
      - net-hoppscotch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hoppscotch-backend.rule=Host(`hoppscotch-backend.{{ docker_l_hostname }}`)"
      - "traefik.http.routers.hoppscotch-backend.entrypoints=websecure"
      - "traefik.http.routers.hoppscotch-backend.tls.certresolver=myresolver"

  # The main hoppscotch app. This will be hosted at port 3000
  # NOTE: To do TLS or play around with how the app is hosted, you can look into the Caddyfile for
  #       the SH admin dashboard server at packages/hoppscotch-selfhost-web/Caddyfile
  hoppscotch-app:
    container_name: hoppscotch-app
    image: hoppscotch/hoppscotch-frontend
    env_file:
      - ./.env
    depends_on:
      - hoppscotch-backend
    ports:
      - "3080:80"
      - "3000:3000"
    networks:
      - net-hoppscotch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hoppscotch.rule=Host(`hoppscotch.{{ docker_l_hostname }}`)"
      - "traefik.http.routers.hoppscotch.entrypoints=websecure"
      - "traefik.http.routers.hoppscotch.tls.certresolver=myresolver"


  # The Self Host dashboard for managing the app. This will be hosted at port 3100
  # NOTE: To do TLS or play around with how the app is hosted, you can look into the Caddyfile for
  #       the SH admin dashboard server at packages/hoppscotch-sh-admin/Caddyfile
  hoppscotch-sh-admin:
    container_name: hoppscotch-sh-admin
    image: hoppscotch/hoppscotch-admin
    env_file:
      - ./.env
    depends_on:
      - hoppscotch-backend
    ports:
      - "3280:80"
      - "3100:3100"
    networks:
      - net-hoppscotch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hoppscotch-admin.rule=Host(`hoppscotch-admin.{{ docker_l_hostname }}`)"
      - "traefik.http.routers.hoppscotch-admin.entrypoints=websecure"
      - "traefik.http.routers.hoppscotch-admin.tls.certresolver=myresolver"

    
  # The preset DB service, you can delete/comment the below lines if
  # you are using an external postgres instance
  # This will be exposed at port 5432
  hoppscotch-db:
    container_name: hoppscotch-db
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      # The default user defined by the docker image
      POSTGRES_USER: postgres
      # NOTE: Please UPDATE THIS PASSWORD!
      POSTGRES_PASSWORD: {{ hoppscotch_postgres_password }}
      POSTGRES_DB: hoppscotch
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - /mnt/storage/containers/hoppscotch-db/data:/var/lib/postgresql/data
    networks:
      - net-hoppscotch

networks:
  net-hoppscotch:
    name: hoppscotch