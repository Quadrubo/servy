services:
  hoppscotch-aio:
    image: 'hoppscotch/hoppscotch:latest'
    container_name: hoppscotch-aio
    networks:
      - net-hoppscotch
    labels:
      # Create http to https middleware
      - 'traefik.enable=true'
      - 'traefik.http.middlewares.hoppscotch-redirect.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.hoppscotch-redirect.redirectscheme.permanent=true'
      # cors middleware
      - 'traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST'
      - 'traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type, Authorization, X-Requested-With'
      - 'traefik.http.middlewares.cors.headers.accesscontrolallowcredentials=true'
      - 'traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=https://hoppscotch.l.qudr.de,https://hoppscotch-admin.l.qudr.de'
      - 'traefik.http.middlewares.cors.headers.accesscontrolmaxage=100'
      - 'traefik.http.middlewares.cors.headers.addvaryheader=true'
      # front-end https route
      - 'traefik.http.routers.hoppscotch.rule=Host(`hoppscotch.l.qudr.de`)'
      - 'traefik.http.services.hoppscotch.loadbalancer.server.port=3000'
      - 'traefik.http.routers.hoppscotch.tls.certresolver=myresolver'
      - 'traefik.http.routers.hoppscotch.entrypoints=websecure'
      - 'traefik.http.routers.hoppscotch.tls=true'
      - 'traefik.http.routers.hoppscotch.service=hoppscotch'
      - 'traefik.http.routers.hoppscotch.middlewares=cors'
      # admin dashboard https route
      - 'traefik.http.routers.hoppscotch-admin.rule=Host(`hoppscotch-admin.l.qudr.de`)'
      - 'traefik.http.services.hoppscotch-admin.loadbalancer.server.port=3100'
      - 'traefik.http.routers.hoppscotch.tls.certresolver=myresolver'
      - 'traefik.http.routers.hoppscotch-admin.entrypoints=websecure'
      - 'traefik.http.routers.hoppscotch-admin.tls=true'
      - 'traefik.http.routers.hoppscotch-admin.service=hoppscotch-admin'
      - 'traefik.http.routers.hoppscotch-admin.middlewares=cors'
      # back-end https route
      - 'traefik.http.routers.hoppscotch-backend.rule=Host(`hoppscotch-backend.l.qudr.de`)'
      - 'traefik.http.services.hoppscotch-backend.loadbalancer.server.port=3170'
      - 'traefik.http.routers.hoppscotch.tls.certresolver=myresolver'
      - 'traefik.http.routers.hoppscotch-backend.tls=true'
      - 'traefik.http.routers.hoppscotch-backend.entrypoints=websecure'
      - 'traefik.http.routers.hoppscotch-backend.service=hoppscotch-backend'
      - 'traefik.http.routers.hoppscotch-backend.middlewares=cors'
    env_file:
      - ./.env
    restart: always
    depends_on:
      hoppscotch-db:
        condition: service_healthy
    ports:
      - "3000:3000"
      - "3100:3100"
      - "3170:3170"

  hoppscotch-db:
    image: postgres:15
    container_name: hoppscotch-db
    ports:
      - "5432:5432"
    environment:
      # The default user defined by the docker image
      POSTGRES_USER: postgres
      # NOTE: Please UPDATE THIS PASSWORD!
      POSTGRES_PASSWORD: {{ hoppscotch_postgres_password }}
      POSTGRES_DB: hoppscotch
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - /mnt/storage/containers/hoppscotch-db/data:/var/lib/postgresql/data
    networks:
      - net-hoppscotch

networks:
  net-hoppscotch:
    name: hoppscotch